{"ast":null,"code":"export const FETCH_SUBSCRIPTION_BEGIN = 'FETCH_SUBSCRIPTION_BEGIN';\nexport const FETCH_SUBSCRIPTION_SUCCESS = 'FETCH_SUBSCRIPTION_SUCCESS';\nexport const FETCH_SUBSCRIPTION_FAILURE = 'FETCH_SUBSCRIPTION_FAILURE';\nexport const AUTHENTICATION_SUCCESS = 'AUTHENTICATION_SUCCESS';\n\nconst authenticationSuccess = payload => ({\n  type: AUTHENTICATION_SUCCESS,\n  payload\n});\n\nconst logoffSuccess = () => ({\n  type: LOGOFF_SUCCESS\n});\n\nconst fetchSubscriptionBegin = subscriptionId => ({\n  type: FETCH_SUBSCRIPTION_BEGIN,\n  subscriptionId\n});\n\nconst fetchSubscriptionSuccess = payload => ({\n  type: FETCH_SUBSCRIPTION_SUCCESS,\n  payload\n});\n\nconst fetchSubscriptionFailure = error => ({\n  type: FETCH_SUBSCRIPTION_FAILURE,\n  payload: error\n});\n\nfunction handleErrors(response) {\n  if (!response.ok) {\n    throw Error(JSON.stringify(response));\n  }\n\n  return response;\n}\n\nfunction fetchSubscription(subscriptionEndpointUrl, options, auth, autoAuth) {\n  return dispatch => {\n    dispatch(fetchSubscriptionBegin(subscriptionEndpointUrl, options));\n    setTimeout(() => {\n      fetch(subscriptionEndpointUrl, options).then(handleErrors).then(res => res.json()).then(json => {\n        if (auth === 'SIGNIN') {\n          dispatch(authenticationSuccess(json.auth_token));\n        } else if (auth === 'SIGNOUT') {\n          dispatch(logoffSuccess());\n        } else if (autoAuth) {\n          dispatch(authenticationSuccess(autoAuth));\n        } else {\n          dispatch(fetchSubscriptionSuccess(json));\n        }\n      }).catch(error => {\n        dispatch(fetchSubscriptionFailure(`${error}`));\n      });\n    }, 2000);\n  };\n}\n\nexport { fetchSubscription, fetchSubscriptionBegin, fetchSubscriptionSuccess, fetchSubscriptionFailure };","map":{"version":3,"sources":["C:/Users/Usuario/reactProjects/findYourHouse/app/src/actions/houseActions.js"],"names":["FETCH_SUBSCRIPTION_BEGIN","FETCH_SUBSCRIPTION_SUCCESS","FETCH_SUBSCRIPTION_FAILURE","AUTHENTICATION_SUCCESS","authenticationSuccess","payload","type","logoffSuccess","LOGOFF_SUCCESS","fetchSubscriptionBegin","subscriptionId","fetchSubscriptionSuccess","fetchSubscriptionFailure","error","handleErrors","response","ok","Error","JSON","stringify","fetchSubscription","subscriptionEndpointUrl","options","auth","autoAuth","dispatch","setTimeout","fetch","then","res","json","auth_token","catch"],"mappings":"AAAA,OAAO,MAAMA,wBAAwB,GAAG,0BAAjC;AACP,OAAO,MAAMC,0BAA0B,GAAG,4BAAnC;AACP,OAAO,MAAMC,0BAA0B,GAAG,4BAAnC;AACP,OAAO,MAAMC,sBAAsB,GAAG,wBAA/B;;AAEP,MAAMC,qBAAqB,GAAGC,OAAO,KAAK;AACxCC,EAAAA,IAAI,EAAEH,sBADkC;AAExCE,EAAAA;AAFwC,CAAL,CAArC;;AAKA,MAAME,aAAa,GAAG,OAAO;AAC3BD,EAAAA,IAAI,EAAEE;AADqB,CAAP,CAAtB;;AAIA,MAAMC,sBAAsB,GAAGC,cAAc,KAAK;AAChDJ,EAAAA,IAAI,EAAEN,wBAD0C;AAEhDU,EAAAA;AAFgD,CAAL,CAA7C;;AAKA,MAAMC,wBAAwB,GAAGN,OAAO,KAAK;AAC3CC,EAAAA,IAAI,EAAEL,0BADqC;AAE3CI,EAAAA;AAF2C,CAAL,CAAxC;;AAKA,MAAMO,wBAAwB,GAAGC,KAAK,KAAK;AACzCP,EAAAA,IAAI,EAAEJ,0BADmC;AAEzCG,EAAAA,OAAO,EAAEQ;AAFgC,CAAL,CAAtC;;AAKA,SAASC,YAAT,CAAsBC,QAAtB,EAAgC;AAC9B,MAAI,CAACA,QAAQ,CAACC,EAAd,EAAkB;AAAE,UAAMC,KAAK,CAACC,IAAI,CAACC,SAAL,CAAeJ,QAAf,CAAD,CAAX;AAAwC;;AAC5D,SAAOA,QAAP;AACD;;AAED,SAASK,iBAAT,CAA2BC,uBAA3B,EAAoDC,OAApD,EAA6DC,IAA7D,EAAmEC,QAAnE,EAA6E;AAC3E,SAAOC,QAAQ,IAAI;AACjBA,IAAAA,QAAQ,CAAChB,sBAAsB,CAACY,uBAAD,EAA0BC,OAA1B,CAAvB,CAAR;AAEAI,IAAAA,UAAU,CAAC,MAAM;AACfC,MAAAA,KAAK,CAACN,uBAAD,EAA0BC,OAA1B,CAAL,CACCM,IADD,CACMd,YADN,EACoBc,IADpB,CACyBC,GAAG,IAAIA,GAAG,CAACC,IAAJ,EADhC,EAC4CF,IAD5C,CACiDE,IAAI,IAAI;AACvD,YAAIP,IAAI,KAAK,QAAb,EAAuB;AACrBE,UAAAA,QAAQ,CAACrB,qBAAqB,CAAC0B,IAAI,CAACC,UAAN,CAAtB,CAAR;AACD,SAFD,MAEO,IAAIR,IAAI,KAAK,SAAb,EAAwB;AAC7BE,UAAAA,QAAQ,CAAClB,aAAa,EAAd,CAAR;AACD,SAFM,MAEA,IAAIiB,QAAJ,EAAc;AACnBC,UAAAA,QAAQ,CAACrB,qBAAqB,CAACoB,QAAD,CAAtB,CAAR;AACD,SAFM,MAEA;AACLC,UAAAA,QAAQ,CAACd,wBAAwB,CAACmB,IAAD,CAAzB,CAAR;AACD;AACF,OAXD,EAYCE,KAZD,CAYOnB,KAAK,IAAI;AACdY,QAAAA,QAAQ,CAACb,wBAAwB,CAAE,GAAEC,KAAM,EAAV,CAAzB,CAAR;AACD,OAdD;AAeD,KAhBS,EAgBP,IAhBO,CAAV;AAiBD,GApBD;AAqBD;;AAED,SACEO,iBADF,EAEEX,sBAFF,EAGEE,wBAHF,EAIEC,wBAJF","sourcesContent":["export const FETCH_SUBSCRIPTION_BEGIN = 'FETCH_SUBSCRIPTION_BEGIN';\nexport const FETCH_SUBSCRIPTION_SUCCESS = 'FETCH_SUBSCRIPTION_SUCCESS';\nexport const FETCH_SUBSCRIPTION_FAILURE = 'FETCH_SUBSCRIPTION_FAILURE';\nexport const AUTHENTICATION_SUCCESS = 'AUTHENTICATION_SUCCESS';\n\nconst authenticationSuccess = payload => ({\n  type: AUTHENTICATION_SUCCESS,\n  payload,\n});\n\nconst logoffSuccess = () => ({\n  type: LOGOFF_SUCCESS,\n});\n\nconst fetchSubscriptionBegin = subscriptionId => ({\n  type: FETCH_SUBSCRIPTION_BEGIN,\n  subscriptionId,\n});\n\nconst fetchSubscriptionSuccess = payload => ({\n  type: FETCH_SUBSCRIPTION_SUCCESS,\n  payload,\n});\n\nconst fetchSubscriptionFailure = error => ({\n  type: FETCH_SUBSCRIPTION_FAILURE,\n  payload: error,\n});\n\nfunction handleErrors(response) {\n  if (!response.ok) { throw Error(JSON.stringify(response)); }\n  return response;\n}\n\nfunction fetchSubscription(subscriptionEndpointUrl, options, auth, autoAuth) {\n  return dispatch => {\n    dispatch(fetchSubscriptionBegin(subscriptionEndpointUrl, options));\n\n    setTimeout(() => {\n      fetch(subscriptionEndpointUrl, options)\n      .then(handleErrors).then(res => res.json()).then(json => {\n        if (auth === 'SIGNIN') {\n          dispatch(authenticationSuccess(json.auth_token));\n        } else if (auth === 'SIGNOUT') {\n          dispatch(logoffSuccess());\n        } else if (autoAuth) {\n          dispatch(authenticationSuccess(autoAuth));\n        } else {\n          dispatch(fetchSubscriptionSuccess(json));\n        }\n      })\n      .catch(error => {\n        dispatch(fetchSubscriptionFailure(`${error}`));\n      })\n    }, 2000);\n  };\n}\n\nexport {\n  fetchSubscription,\n  fetchSubscriptionBegin,\n  fetchSubscriptionSuccess,\n  fetchSubscriptionFailure,\n};\n"]},"metadata":{},"sourceType":"module"}